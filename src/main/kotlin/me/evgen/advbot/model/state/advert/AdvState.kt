package me.evgen.advbot.model.state.advert

import chat.tamtam.botsdk.client.RequestsManager
import chat.tamtam.botsdk.keyboard.keyboard
import chat.tamtam.botsdk.model.Button
import chat.tamtam.botsdk.model.ButtonIntent
import chat.tamtam.botsdk.model.ButtonType
import chat.tamtam.botsdk.model.request.InlineKeyboard
import chat.tamtam.botsdk.state.CallbackState
import me.evgen.advbot.Payloads
import me.evgen.advbot.getBackButton
import me.evgen.advbot.getUserId
import me.evgen.advbot.model.navigation.Payload
import me.evgen.advbot.model.state.BaseState
import me.evgen.advbot.model.state.CustomCallbackState
import me.evgen.advbot.service.AdvertService
import me.evgen.advbot.service.PlatformsForPostingArgs

class AdvState(timestamp: Long, private val advertId: Long) : BaseState(timestamp),
    CustomCallbackState {
    override suspend fun handle(
        callbackState: CallbackState,
        requestsManager: RequestsManager
    ) {
        val advert = AdvertService.findAdvert(advertId)
        if (advert == null) {
            "–û—à–∏–±–∫–∞! –ù–µ—Ç —Ç–∞–∫–æ–π —Ä–µ–∫–ª–∞–º—ã.".answerNotification(
                callbackState.getUserId(),
                callbackState.callback.callbackId,
                requestsManager
            )
            return
        }

        val campaigns = AdvertService.getAllCampaignsByAd(advertId)
        val postCount = campaigns.size
        var viewCount = 0
        for (campaign in campaigns) {
            val message = campaign.getPostFromServer(requestsManager)
            if (message != null) {
                viewCount += message.statistics.views - 1 //TODO —ç—Ç–æ –∫–æ—Å—Ç—ã–ª—å –Ω–∞ —Å—á–µ—Ç—á–∏–∫, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç —Å–≤–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä (–ø–æ—Ö–æ–¥—É)
            }
        }


        """–†–∞–±–æ—Ç–∞ —Å —Ä–µ–∫–ª–∞–º–æ–π:
            | ${advert.title}
            | 
            | –î–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞ $postCount —Ä–∞–∑.
            | –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–µ–∫–ª–∞–º—ã: $viewCount""".trimMargin().sendToUserWithKeyboard(
            callbackState.callback.user.userId,
            createKeyboard(),
            requestsManager
        )
    }

    private fun createKeyboard(): InlineKeyboard {
        return keyboard {
            +buttonRow {
                +Button(
                    ButtonType.CALLBACK,
                    "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∫–ª–∞–º—É ‚öô",
                    payload = Payload(
                        AdvConstructorState::class,
                        AdvConstructorState(
                            timestamp,
                            advertId,
                            isCreatingAdvert = false
                        ).toJson()
                    ).toJson()
                )
            }
            +buttonRow {
                +Button(
                    ButtonType.CALLBACK,
                    "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É üöÄ",
                    intent = ButtonIntent.POSITIVE,
                    payload = AdvChoosePlatform(
                        timestamp,
                        PlatformsForPostingArgs(advertId)
                    ).toPayload().toJson()
                )
            }
            +buttonRow {
                +Button(
                    ButtonType.CALLBACK,
                    "–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É üóë",
                    intent = ButtonIntent.NEGATIVE,
                    payload = Payload(
                        AdvDeleteDialogState::class,
                        AdvDeleteDialogState(timestamp, advertId).toJson()
                    ).toJson()
                )
            }
            +buttonRow {
                +getBackButton(
                    Payload(
                        AdvListState::class, AdvListState(
                            timestamp
                        ).toJson()
                    )
                )
            }
        }
    }
}